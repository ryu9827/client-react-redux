{"version":3,"sources":["store/Action_Constant.js","store/reducer.js","store/store.js","components/AuditCard.js","store/actionCreator.js","components/CardList.js","App.js","registerServiceWorker.js","index.js"],"names":["C","ENGLISH","RUSSIAN","SPANISH","CHINESE","reducer","state","arguments","length","undefined","english","type","console","log","russian","spanish","chinese","store","createStore","Description","props","react_default","a","createElement","description","Button_default","variant","size","color","href","report","target","buttonText","AuditCard","button","getState","Card_default","className","CardActionArea_default","website","CardMedia_default","component","image","logo","title","name","CardContent_default","action","language","CardList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","dispatch","_this2","onClick","audit_data","map","audit","components_AuditCard","assign","key","Component","connect","App","_store$getState","header","privacy","contactUs","components_CardList","ownProps","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d68bad1e.chunk.js","sourcesContent":["const C = {\n    ENGLISH:\"ENGLISH\",\n    RUSSIAN:\"RUSSIAN\",\n    SPANISH:\"SPANISH\",\n    CHINESE:\"CHINESE\"\n}\n\nexport default C;","import C from './Action_Constant';\nimport english from '../languages/english.json';\nimport chinese from '../languages/chinese.json';\nimport spanish from '../languages/spanish.json';\nimport russian from '../languages/russian.json';\n\nconst reducer = (state=english, action) => {\n    switch(action.type){\n        case C.RUSSIAN:\n        console.log('click')\n            return russian;\n        case C.SPANISH:\n            return spanish;\n        case C.CHINESE:\n            return chinese;\n        case C.ENGLISH:\n            return english;\n        default: \n            return state;\n    }\n}\n\nexport default reducer;","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nconst store = createStore(reducer)\nexport default store;","import React, { Component } from 'react';\nimport '../AuditCard.css'\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia';\nimport store from '../store/store';\n\nfunction Description(props){\n  return (\n    <div>\n      <p>{props.description}</p>\n      <Button \n        variant=\"contained\"\n        size=\"small\"\n        color=\"primary\"\n        href={props.report} \n        target=\"_blank\"\n      >{props.buttonText}</Button>\n    </div>\n  )\n}\n\nfunction AuditCard(props) {\n  const { button } = store.getState();\n  return(\n     <Card className=\"audit-card\">\n     <CardActionArea href={props.website} target=\"_blank\">\n        <CardMedia\n          component=\"img\"\n          className=\"audit-card-media\"\n          image={props.logo}\n          title={props.name}\n        />\n      </CardActionArea>\n        <CardContent>\n          <h2>{props.name}</h2>\n          {props.description && \n          <Description description={props.description} report={props.report} buttonText={button}></Description>}\n        </CardContent>\n    </Card>\n  );\n}\n\nexport default AuditCard;\n","const action = (language) => {return {type:language}}\n\nexport default action;","import React, { Component } from 'react';\nimport AuditCard from './AuditCard';\nimport action from '../store/actionCreator';\nimport PropTypes from 'prop-types';\nimport C from '../store/Action_Constant';\nimport audit_data from '../audits.json';\nimport { connect } from \"react-redux\";\nimport store from '../store/store';\n\nclass CardList extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  handleClick = (language) => {\n    console.log('click')\n    store.dispatch({type: language})\n  }\n\n  render() {\n    return (\n      <div className=\"audit-container\">\n        Languages: \n          <button onClick={()=>this.handleClick(C.ENGLISH)}>English</button>{`  `}\n          <button onClick={()=>this.handleClick(C.RUSSIAN)}>русский</button>{`  `}\n          <button onClick={()=>this.handleClick(C.SPANISH)}>Spanish</button>{`  `}\n          <button onClick={()=>this.handleClick(C.CHINESE)}>简体中文</button>{`  `}\n          <div className=\"audit-list\">\n          {audit_data.map((audit) => <AuditCard key={audit.name} {...audit}/>)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(null, action)(CardList);\n","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './components/CardList';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport store from './store/store'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { header, button, privacy, contactUs} = store.getState();\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <h1>Blockchainlab.nz</h1>\n          <h1 className=\"App-title\">{header}</h1>\n        </header>\n        <h4>{privacy}</h4>\n        <h4>{contactUs}</h4>\n        <CardList buttonText={button} />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state, ownProps){\n  return {\n    header: state.header,\n    button: state.button,\n    privacy: state.privacy,\n    contactUs:state.contactUs\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store/store'\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}